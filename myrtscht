#!/usr/bin/perl

# all the nice modules
use strict;
use warnings;
use Log::Log4perl qw/ :easy /;
use Cwd;
use Getopt::Long qw/ :config no_ignore_case bundling /;
use Games::Tournament::RoundRobin;
use Net::CUPS;
use Net::CUPS::Destination;
use Pod::Usage;

# set up all the nice options
pod2usage(2) unless @ARGV;  # no options are no good
my %Options;
GetOptions(
        's'      => \$Options{s},
        'a'      => \$Options{a},
        'p'      => \$Options{p},
        'h|help' => \$Options{h},
        'r:s'    => \$Options{r},
        'g:s'    => \$Options{g},
        'n:s'    => \$Options{n},
        'd:s'    => \$Options{d},
        'P:s'    => \$Options{P},
) or pod2usage(2);

#|||||||||||||||||||||||||||||||||
#        ||
#|||||||||||||||||||||||||||||||||

# initialize the logger or not
if (defined $Options{d}) {
    #                           Adjust here, if needed!
    #                                   vvvvvvvv
    Log::Log4perl->init($Options{d} || "log.conf");
    # Because CUPS is one base of this program I don't use the portable
    # variant with File::Spec.
    INFO "Initialized.";

    # little debbugging help
    for my $option (keys %Options) {
        DEBUG "Set option $option to $Options{$option}." # my favourite
            if defined $Options{$option};                # part
    }
}

# invoke the subroutines corresponding to the options
{
my @arguments = (\%Options, \@ARGV);
if (defined $Options{n}) {
    INFO "Invoking the subroutine creating a new tournament.";
    &create_new_tournament(@arguments);
} elsif (defined $Options{p}) {
    INFO "Invoking the subroutine processing the group files.";
    &process_group_files(@arguments);
} elsif (defined $Options{a}) {
    INFO "Invoking the subroutine preprocessing the game files.";
    &preprocess_game_files(@arguments);
} elsif (defined $Options{h}) {
    pod2usage( { -exitval => 1,
                 -verbose => 2,
                 -output  => \*STDOUT,
               } );
}
}

# the subroutine invoked if the option -n is defined
sub create_new_tournament {
    my $options               = shift;
    my $specified_groupfnames = shift;

    # creating the directory in which the tournament is stored
    {
    my @date           = (localtime)[4,3,5];
    my $tournam_dir = 
        $options->{n} || sprintf(
                "Tournament-%02d%02d%d",
                $date[0] + 1,
                $date[1],
                $date[2] + 1900);
    mkdir($tournam_dir, 0755)
        or die "Couldn't make tournament directory $tournam_dir: $!\n";
    DEBUG "Generated new tournament directory: $tournam_dir.";
    chdir $tournam_dir
        or die "Couldn't change into tournament directory "
             . "$tournam_dir: $!\n";
    DEBUG "Now in tournament directory $tournam_dir.";
    }
   
    # write the group template into all the group files
    my $groupnr = $options->{g} || 10;
    my @groupfiles;
    for (my $i = 1; $i <= $groupnr; $i++) {
        my $groupfname = sprintf("%02d.g", $i);
        open(GROUPFILE, ">", $groupfname)
            or die "Couldn't open group file $groupfname for "
                 . "writing: $!\n";
        print GROUPFILE <<"EOF";
Name:
Tables:
Members:

EOF
    
        DEBUG "Wrote template to group file: $groupfname";
    }
    INFO "Created the group files.";
}

# the subroutine invoked if the option -p is defined
sub process_group_files {
    my $options    = shift;
    my $groupfiles = shift;
    my $cwd        = getcwd;
    my $printfile  = "gamesheets";
    my $printer;

    # We have to compute some things therewith the printout looks
    # nice later.
    # The number of lines per sheet of A4 paper must be 67 and 67
    # must be the number of lines per sheet of A4 paper as thou have
    # to use A4 paper with a number of 13 chars per column to get 
    # nice results.
    my $maxsetnr        = ($options->{r} || 2) * 2 - 1;
    my $gamesheetheigth = $maxsetnr + 6;
    my $gamesheets      = sprintf("%d", 67 / $gamesheetheigth);
    my $newlines        = 67 - $gamesheets * $gamesheetheigth;
    DEBUG "The game sheets are $gamesheetheigth high. Hence we can "
        . "put $gamesheets of the on one column and have to insert "
        . "$newlines newlines after them in order to make CUPS happy.";

    # the format for the printout; Alas, I can't declare the
    # variables in a smaller scope. (Or don't know it better.)
    my($groupname, $id, $table, $roundcnt, $member1, $member2);
    my $printoutform = 
          "format GAMEPRINT =                                      \n"
        . 'Group: @' . '<' x 36                                 . "\n"
        . '$groupname'                                          . "\n"
        . 'Round: @<<<< Table: @<<<<' . ' ' x 10 . 'ID: @<<<<'  . "\n"
        . '$roundcnt, $table, $id'                              . "\n"
        . '-'  x 22 . '+' . '-' x 21                            . "\n"
        . '@' . '|' x 20 . ' |' . '@' . '|' x 20                . "\n"
        . '$member1, $member2'                                  . "\n"
        . '-'  x 22 . '+' . '-' x 21                            . "\n"
        . (' ' x 22 . '|' . ' ' x 21 . "\n") x $maxsetnr
        . '-'  x 22 . '+' . '-' x 21                            . "\n"
        . ".\n"; # I love formats. Especially if they are dynamic.
    DEBUG $printoutform if defined $options->{d};
    eval $printoutform;
    die $@ if $@;
        
    # initialize the printing things
    # invoke the spooler or not
    unless (defined $options->{s}) {
        my $cups = Net::CUPS->new()
            or warn "Couldn't get a nice CUPS---we "
                  . "won't be able to print.\n";
        $printer = $cups->getDestination($options->{P})
            or warn "Couldn't get your printer's destination: "
                  . "You have to specify another.\n";
        $printer->addOption("cpi", 13);
        $printer->addOption("columns", 2);
    } 

    # process the group files one by one
    for my $groupfile (@$groupfiles) {
        my $groupfnr = substr($groupfile, 0, 2);

        # manage the group directory
        {
        my $groupdir = "$groupfnr.d";
        mkdir($groupdir, 0755)
            or die "Couldn't make group directory $groupdir: $!\n";
        rename($groupfile, "$groupdir/$groupfile")
            or die "Couldn't move group file $groupfile to "
                 . "group directory $groupdir: $!\n";
        chdir $groupdir
            or die "Couldn't change into group directory $groupdir: $!";
        DEBUG "Now in group directory $groupdir.";
        }

        # It's a silly place, but I didn't find a better.
        open(GAMEPRINT, ">>", $printfile)
            or die "Couldn't open printfile $printfile for "
                 . "appending: $!\n";
        select((select(GAMEPRINT), $|++)[0]);

        # read the groupfile
        open(GROUPFILE, "<", $groupfile)
            or die "Couldn't open group file $groupfile for "
                 . "reading: $!\n";
        chomp(my @gf_content = <GROUPFILE>);
        close GROUPFILE;
        DEBUG "Group file content: @gf_content";
        $groupname  = substr(shift @gf_content, 6);
        DEBUG "The group is named $groupname.";
        my @tables  = split(m([ ,;.:/]+), substr(shift @gf_content, 8));
        DEBUG "It plays at the tables @tables.";
        shift @gf_content;
        my @members = @gf_content;
        DEBUG "It consists of @members.";
        undef @gf_content;

        # create the schedule for the group
        my @schedule;
        {
        DEBUG "The schedule:";
        my $group = Games::Tournament::RoundRobin->new(
                league => \@members
                );
        for (my $i = 1; $i <= $group->rounds(); $i++) {
            my %round;
            my %raw_schedule = %{ $group->membersInRound($i) };
            my %parsed_values;
            DEBUG "Round $i.";
            for my $member (keys %raw_schedule) {
                next if $member eq "Bye";
                next if $raw_schedule{$member} eq "Bye";
                next if $parsed_values{$member};
                $round{$member} = $raw_schedule{$member};
                $parsed_values{$round{$member}} = 1;
            } # The data structure created by the module has doubled
              # pairings and silly members named Bye. So I have to build
              # a better one. I also could delete() the regarding, but
              # I like this way better.
            push(@schedule, \%round);
            DEBUG "The schedule now: @schedule";
        }
        }

        # process the schedule and create the necessary files
        {
        my($gamecnt, $appendcnt);

        for my $round (@schedule) {
            $roundcnt++;
            for my $member (keys %{ $round }) {
                $id      = $groupfnr . sprintf("%02d", ++$gamecnt);
                $table   = shift @tables;
                $member1 = $member;
                $member2 = $round->{$member};
                my $gamefile = sprintf("%02d.s", $gamecnt);
                push(@tables, $table);

                # create the gamefile
                open(GAMEFILE, ">", $gamefile)
                    or die "Couldn't open game file $gamefile for "
                         . "for writing: $!\n";
                print GAMEFILE "$member | $round->{$member}\n";

                # append to the print file
                write GAMEPRINT;
                $appendcnt++;
                if ($appendcnt == $gamesheets) {
                    print GAMEPRINT "\n" x $newlines;
                    $appendcnt = 0;
                }
            }
        }
        }

        # print out or do something else
        unless (defined $options->{s}) {
            $printer->printFile($printfile, $printfile)
                or die "Couldn't print out: $!\n";
            unlink $printfile
                or warn "Couldn't remove print file $printfile: $!\n";
        }

        chdir $cwd
            or die "Couldn't change into former directory $cwd: $!\n";
        DEBUG "Back in $cwd.";
    }
    INFO "Created the schedule.";
}

# the subroutine invoked if the option -a is defined
# But it just preprocesses and gives the files directly to the
# true processing subroutine.
sub preprocess_game_files {
    my $options         = shift;
    my $file_containing = shift;

    # process the input and filter out just the game files to
    # give to the following routine
    if (-d $file_containing->[0]) {
        DEBUG "We have a directory with game files given.";
        my $dirname = $file_containing->[0];
        opendir(GROUPDIR, $file_containing->[0])
            or die "Couldn't open group directory "
                 . "$file_containing->[0]: $!\n";
        @$file_containing = readdir GROUPDIR;
        closedir GROUPDIR;
        chdir $dirname
            or die "Couldn't change into groupdirectory $dirname: $!\n";
    } else {
        DEBUG "We have a list of game files given.";
    }
    my @gamefiles = grep { /\.s$/ } @$file_containing;
    DEBUG "Giving game files @gamefiles to the game file processor.";
    &process_game_files($options, \@gamefiles);
}

# process the game files
sub process_game_files {
    no warnings;
    my $options   = shift;
    my $gamefiles = shift;
    my (%players, $player, $rank);

    # process the game file and create the data structure
    for my $gamefile (@$gamefiles) {
        open(GAMEFILE, "<", $gamefile)
            or die "Couldn't open gamefile $gamefile for reading: $!\n";
        my($name1, $name2);
        my $numcont; # It controls whether we actually have the first
                     # line of a game file (with the names) or one of
                     # the other lines (with the results given).

        while (<GAMEFILE>) {
            chomp;
            next if /#/;
            if (/(.+) \| (.+)/) {
                ($name1, $name2) = ($1, $2);
                 DEBUG "The players are $name1 and $name2.";
                 $numcont = 0;
            } else {
                ($players{$name1}{balls}, $players{$name2}{balls})
                    = /(\d+)\D+(\d+)/;
                DEBUG "Result: $1 : $2";
                $numcont = 1;
            }

            $players{$name1}{all_fails} += $players{$name2}{balls},
            $players{$name2}{all_fails} += $players{$name1}{balls},
            $players{$name1}{all_balls} += $players{$name1}{balls},
            $players{$name2}{all_balls} += $players{$name2}{balls},
            $players{$name1}{ball_difference} +=
              ($players{$name1}{balls} - $players{$name2}{balls}),
            $players{$name2}{ball_difference} +=
              ($players{$name2}{balls} - $players{$name1}{balls}),
                if $numcont;

            if ($numcont and
                    $players{$name1}{balls} > $players{$name2}{balls}) {
                $players{$name1}{sets_won}++;
                $players{$name1}{all_sets_won}++;
                $players{$name2}{sets_lost}++;
                $players{$name2}{all_sets_lost}++;
            } elsif ($numcont) {
                $players{$name2}{sets_won}++;
                $players{$name2}{all_sets_won}++;
                $players{$name1}{sets_lost}++;
                $players{$name1}{all_sets_lost}++;
            }
            $players{$name1}{balls} = 0; # Just for this game
            $players{$name2}{balls} = 0; #
        }

            if ($players{$name1}{sets_won}
                    > $players{$name2}{sets_won}) {
                $players{$name1}{wins}++;
                $players{$name2}{losts}++;
            } else {
                $players{$name2}{wins}++;
                $players{$name1}{losts}++;
            }

            $players{$name1}{set_difference} +=
              ($players{$name1}{sets_won} - $players{$name2}{sets_won});
            $players{$name2}{set_difference} +=
              ($players{$name2}{sets_won} - $players{$name1}{sets_won});

            $players{$name1}{sets_won} = 0; # Just for this game.
            $players{$name2}{sets_won} = 0; #
    }
    # I know, this whole thing is very very ugly. But how ugly
    # would it be  if there were no hashes? On top of that it
    # produces occasional warnings. But I think, if it
    # wouldn't produce occasional warnings, it would also be
    # far more ugly.
    close GAMEFILE;
    INFO "Processed the game files.";

    # sort the people according to their games
    my @ranking = sort {
        $players{$b}{wins}           <=> $players{$a}{wins}           or
        $players{$b}{set_difference} <=> $players{$a}{set_difference} or
        $players{$b}{ball_difference} <=> $players{$a}{ball_difference}
    } keys %players;
    DEBUG "Sorted all the stuff.";
    
    # generate the ranking file
    open(RANKING, ">", "ranking")
        or die "Couldn't open ranking file \"ranking\" for "
             . "writing: $!\n";
    select((select(RANKING), $= = 67)[1]);

    foreach $player (@ranking) {
        ++$rank;
        write RANKING;
    }
    INFO "Generated the ranking file.";

format RANKING_TOP =
Rank | Name                  |  Games  |   Sets    |  SD  |    Balls    |  BD
-----+-----------------------+---------+-----------+------+-------------+------
.
format RANKING =
#ra  | pl                    | wi : lo | sw  : sl  |  sd  | ba   : fa   | bd
@>>.@||@<<<<<<<<<<<<<<<<<<<<@||@> : @<@||@>> : @<<@||@|||@||@>>> : @<<<@||@||||
{$rank, "|", $player, "|",
$players{$player}{wins}            || 0, 
$players{$player}{losts}           || 0, "|",
$players{$player}{all_sets_won}    || 0,
$players{$player}{all_sets_lost}   || 0, "|",
$players{$player}{set_difference}  || 0, "|",
$players{$player}{all_balls}       || 0,
$players{$player}{all_fails}       || 0, "|",
$players{$player}{ball_difference} || 0
}
.
}

__END__

=encoding utf8

=head1 NAME

myrtscht - My Round robin Tournament SCHeduling for Table tennis



=head1 VERSION

0.1rc2



=head1 SYNOPSIS

myrtscht B<-n> [I<name>] [B<-g> I<number>] [B<-d> [I<file>]]

myrtscht B<-p> I<files> [B<-r> I<rounds>] [B<-s>] [B<-P> I<printer>] [B<-d> [I<file>]]

myrtscht B<-a> I<files>/I<directory> [B<-d> [I<file>]]

myrtscht B<--help>

myrtscht B<-h>



=head1 DESCRIPTION

B<myrtscht> is a program which helps you managing table tennis
tournaments using the round robin system.  But I think, you can also
use it for other games which do not allow standoffs.  It is completely
text and command based, so there is neither a nice command line nor a
GUI, my apologies for this (if this needs to be apologised).
Therefore it works, as you can see in the synopsis, with running
commands and editing text files.



=head1 OPTIONS AND ARGUMENTS

=over

=item B<-n> [I<name>]

Creates a new directory used for the tournament with the group files
in it.  You can also give the directory a I<name>, which has no
effects on the group files, the default is F<< Tournament-<date> >>.

=item B<-g> I<number>

Defines the I<number> of group files created when running with B<-n>,
the default is 10.

=item B<-p> I<files>

Creates a group directory with the game files in it from each of the
group I<files> given and prints out some nice formatted tables on
sheets of paper where you can write down the results of the games.

=item B<-r> I<sets>

Defines the number of I<sets> to win for winning the whole game, the
default is 2.  This is senseful when running with B<-p>.

=item B<-s>

Disables printing when running with B<-p>.

=item B<-P> I<printer>

Defines the I<printer> used when running with B<-p>, the default is the
standard printer.

=item B<-a> I<files>/I<directory>

Computes a ranking file from the given group I<files> or I<directory>.

=item B<-d> [I<file>]

Switches to debugging mode.  The log is created by using the
L<Log::Log4perl(3)|Log::Log4perl> module.  You can specify a config 
I<file> to modify the output.

=item B<-h> or B<--help>

Print this help.

=back



=head1 FILES

B<myrtscht> creates different files in its process of working.  They all
have either a special extension or a special name.  These may show up:

=head2 The Tournament Directory

The tournament directory is the directory all information for on
tournament are stored in.  It is recommended to stay in this or
subordinated directories when working with B<myrtscht>.


=head2 The Group Files F<*.g>

These are the files you are going to see first when running a
tournament.  Their format (before editing) is:

    Name:
    Tables:
    Members:

Z<> Behind S<"Name: "> you have to write down the name of the group.
Behind S<"Tables: "> the names (numbers are recommended) of the tables
the group plays at stand in a comma separated list. (Yes there are
also other separators possible.  Look in the source code if
you want them implicitly!)  I<Under> "Members:" you have to
write the names of the members of the group.

=head3 Example:

    Name: 50 before Christ
    Tables: 1, 2, 3
    Members:
    Asterix
    Obelix
    Gaius Iulius Caesar
    Gaius Bonus

=head3 Note:

Names with more than 20 letters are unbearable.  (Maybe also the
parents of the persons with this names.)


=head2 The Group Directories F<*.d>

Group directories are created when running B<myrtscht> with the option
B<-p>.  They are named like the group files they are belonging to
(apart from the extension).  All things belonging to one group should
be done within the particular directory, thus the group file is moved
into the directory when running with B<-p>.


=head2 The Game Files F<*.s>

These are the files being in a group directory after running with B<-p>.
They look like this (before editing):

    Asterix | Gaius Iulius Caesar

There you can write down the results of a match.

=head3 Example:

    Asterix | Gaius Iulius Caesar
    11  8
    14  16
    11  9

=head3 Note:

It is recommended to use just whitespace between the numbers.


=head2 The Printout/F<gamesheets>

When running B<myrtscht> with the option B<-p> it creates the file
F<gamesheets>, sends it to the printer and then removes it.  If B<-s> is
defined, there will be no printing and no removing.  In both cases
the parts of the printout will have this format (here just an example):
 
    Group: 50 before Christ
    Round: 2     Table: 3              ID: 0303
    ----------------------+---------------------
           Asterix        | Gaius Iulius Caesar
    ----------------------+---------------------
                          |
                          |
                          |
    ----------------------+---------------------

Each of this parts represents one game.  Behind S<"Group: "> is the
name of the group situated.  S<"Round: "> is the round they play in,
S<"Table: "> the name of the table they play at.  The "ID" is
formed out of the names of the group directory (first two digits)
and the game file (last two or three digits).  Hence you can
easily identify the game file belonging to the particular game
sheet.  (This is also demonstrated down below.)  Then the names of
the opponents come and in the space below the referee can write
down the result of the match.  The height of this space varies
with the number of rounds to play to win a match.


=head2 The Ranking File F<ranking>

Here the results of a group are written down.  You can see an example
down below, but in order to work also with high scores it is a bit wide.

    Rank | Name                  |  Games  |   Sets    |  SD  |    Balls    |  BD
    -----+-----------------------+---------+-----------+------+-------------+------
      1. | Asterix               |  3 : 0  |   6 : 1   |  5   |   81 : 65   |  16
      2. | Gaius Iulius Caesar   |  2 : 1  |   5 : 2   |  3   |   77 : 52   |  25
      3. | Obelix                |  1 : 2  |   2 : 4   |  -2  |   54 : 56   |  -2
      4. | Gaius Bonus           |  0 : 3  |   0 : 6   |  -6  |   28 : 67   |  -39

"Rank" and "Name" are unambiguous.  "Games", "Sets" and "Balls"
represent the played games, sets and balls respectively in the format
"won : lost".  SD and BD represent the difference between won and lost
sets balls respectively.



=head1 A BIG EXAMPLE or TUTORIAL (as you like it)

Since all the stuff above is very theoretical, I will give a big
example of the order of events in a tournament.  You can see this part
also as a tutorial which makes getting used to B<myrtscht> easy.

So let us start: Imagine, we are the organizers of a yearly table
tennis tournament and we have heard of B<myrtscht>.  Luckily we have a
computer, we install the program and look forward to the event first
time, as it will not become such tremendous arduous like the last
years because of having B<myrtscht>.  Unfortunately the person
responsible for advertising has become ill and now there are just
eleven persons to play.  Whatever! Iulius Caesar is here and we do not
want to disappoint him.

But now let's begin working with our new tool!

First we init the tournament:

    $ myrtscht -n Aremorican_Open-50BC -g 2
    $ cd Aremorican_Open-50BC
    $ ls
    01.g  02.g

There have four women and seven men registered at our table, so we
make two groups out of them.  (See! We were such foresighted, that we
have created just two group files.)

    $ vim 01.g          # of course we use vim(1)
    $ cat 01.g
    Name: Women
    Tables: 1
    Impedimenta
    Mrs Fulliautomatix
    Bravura
    Bacteria
    $ vim 02.g
    $ cat 02.g
    Name: Men
    Tables: 2, 3
    Asterix
    Obelix
    Gaius Iulius Caesar
    Gaius Bonus
    Anticlimax
    Edifis
    Dogmatix

We have already set up our printer, so we can start creating the group
directories immediately.  The only thing is that it is not the
standard.  So we have to define it explicitely:

    $ myrtscht -p *.g -P GS-Printfix-50BC
    $ ls
    01.d  02.d
    $ ls *.d
    01.d:
    01.g  01.s  02.s  03.s  04.s  05.s  06.s    

    02.d:
    01.s  03.s  06.s  09.s  12.s  15.s  18.s  21.s
    02.g  04.s  07.s  10.s  13.s  16.s  19.s
    02.s  05.s  08.s  11.s  14.s  17.s  20.s

Now we have two possibilities: Either we give the whole gamesheets to
the referees, relax now and have some hurry later, or we cut the
gamesheets into the parts belonging to just one game, relax never
because of continuous getting of little slips and have not so much hurry
afterwards.

Whatever, when the referees have got the gamesheets the playing can
start, they can write the results on the paper easily and we have
just the job to write it into the computer.  I recommend doing this in
vim(1) and with tabs:

    $ vim -p 01.d/*.s
    $ cat 01.d/*.s
    Impedimenta | Mrs Fulliautomatix
    11  4
    11  8
    Bacteria | Bravura
    11  8
    10  12
    11  9
    Impedimenta | Bravura
    11  4
    11  3
    Bacteria | Mrs Fulliautomatix
    14  16
    12  10
    18  20
    Impedimenta | Bacteria
    11  7
    5   11
    9   11
    Bravura | Mrs Fulliautomatix
    3   11
    8   11
    $ vim -p 02.d/*.s
    # I leave the "cat" out here. It needs too much space and food with
    # two of them.

=head3 Note:

Thanks to the ID on the game sheets it is very easy to discover the
related game file.  The first two digits are synonymous with the
number of the group directory, the last two to three with the number
of the game file.

=head4 Example:

        04.s
         /\
   ID: 0304   ==> vim 03.d/04.s
       \/
      03.d

As soon as we have done this, we are very anxious to know the results:

    $ myrtscht -a 01.d
    $ cat 01.d/ranking
    Rank | Name                  |  Games  |   Sets    |  SD  |    Balls    |  BD
    -----+-----------------------+---------+-----------+------+-------------+------
      1. | Impedimenta           |  2 : 1  |   5 : 2   |  3   |   69 : 48   |  21
      2. | Bacteria              |  2 : 1  |   5 : 4   |  1   |  105 : 100  |   5
      3. | Mrs Fulliautomatix    |  2 : 1  |   4 : 3   |  1   |   80 : 77   |   3
      4. | Bravura               |  0 : 3  |   1 : 6   |  -5  |   47 : 76   |  -29
    $ cd 02.d
    $ myrtscht -a *.s
    $ cat ranking
    Rank | Name                  |  Games  |   Sets    |  SD  |    Balls    |  BD
    -----+-----------------------+---------+-----------+------+-------------+------
      1. | Anticlimax            |  6 : 0  |  12 : 0   |  12  |  140 : 104  |  36
      2. | Asterix               |  5 : 1  |  10 : 3   |  7   |  148 : 105  |  43
      3. | Edifis                |  4 : 2  |   8 : 5   |  3   |  134 : 108  |  26
      4. | Gaius Iulius Caesar   |  3 : 3  |   7 : 7   |  0   |  134 : 116  |  18
      5. | Obelix                |  2 : 4  |   5 : 9   |  -4  |  123 : 150  |  -27
      6. | Dogmatix              |  1 : 5  |   4 : 10  |  -6  |  118 : 134  |  -16
      7. | Gaius Bonus           |  0 : 6  |   0 : 12  | -12  |   52 : 132  |  -80

Very good!  The tournament is over.---Let's turn the computer off and
celebrate a bit!

    $ su -c 'shutdown -h now'



=head1 NOTES

=over

=item -

B<myrtscht> will not check if the input data are valid and go along with
the rules of the game.

=item -

B<myrtscht> will not check if the given command line options are
senseful.

=item -

It is required to have a printout with 67 lines per page.  In later
version, when B<myrtscht> makes use of configuration files, there will
be easy support for other numbers.  Now you can change the code, too,
though.---That should not be such difficult.

=item -

If there are some mistakes in my grammar or spelling---please excuse and
write me!

=item -

If anybody does not my like my way to document---please write me.

=item -

My name is written with "o umlaut", but perldoc(1) doesn't like the
correct spelling.  If you want to see the correct spelling use
S<C<pod2man --utf8 myrtscht | nroff -Tlatin1 -man | less>> instead of
running with B<-h> or B<--help>!

=back



=head1 BUGS

When printing letters with umlaut in formats the layout gets a bit
crazy, because the umlauts are counted like two but printed like one
char.---I think, this is a common problem, but haven't found a
solution.  Maybe anyone reading this will give me a hint.

When finding some other bugs write to my e-mail address.  There will
also be a website and I want to upload this program to
L<GNU Savannah|http://savannah.nongnu.org>.  So there is hope for a real
bug tracker.



=head1 SEE ALSO

L<Games::Tournament::RoundRobin>, L<Log::Log4perl>

There will also be a web site when I find time for it (maybe in summer).
But the current version is always available from
L<www.myrtscht.de|http://www.myrtscht.de> (in German and in English).



=head1 AUTHOR

Richard Möhn E<lt>richard.moehn@gmx.deE<gt>



=head1 COPYRIGHT AND LICENSE

Copyright 2008 by Richard Möhn E<lt>richard.moehn@gmx.deE<gt>

This program is free software.  You may copy or redistribute it under
the same terms as Perl itself.

=cut
